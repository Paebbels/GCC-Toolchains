name: GCC Toolchain for AArch64 with NewLib

on: [ push ]

#env:
#  BUILD_DIR: build

jobs:
  binutils:
    name: binutils ${{ matrix.binutils }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - {arch: aarach64, binutils: 2.63.0 }
          - {arch: aarach64, binutils: 2.63.1 }

    env:
      TARGET:              ${{ matrix.arch }}-none-elf
      PREFIX:              /opt/cross

      BINUTILS_SOURCE_DIR: binutils-${{ matrix.binutils }}
      BINUTILS_BUILD_DIR:  build/binutils

    outputs:
      arch:     ${{ matrix.arch }}
      target:   ${{ env.TARGET }}
      prefix:   ${{ env.PREFIX }}
      binutils: ${{ matrix.binutils }}

    steps:
      - name: Restore binutils download cache (extracted downloads file)
        id:   cache-downloads
        uses: actions/cache@v2
        with:
          path: |
            binutils-${{ matrix.binutils }}/
          key: binutils-${{ matrix.binutils }}

      - name: Download binutils ${{ matrix.binutils }} and extract (in uncached)
        if:  steps.cache-downloads.outputs.cache-hit != 'true'
        run: |
          curl https://mirrors.syringanetworks.net/gnu/binutils/binutils-${{ matrix.binutils }}.tar.gz --output binutils-${{ matrix.binutils }}.tar.gz
          tar -xzf binutils-${{ matrix.binutils }}.tar.gz
          ls -lAh

      - name: Make directory structure
        run: |
          mkdir -p ${PREFIX}
          mkdir -p ${BINUTILS_BUILD_DIR}

      - name: List binutils ${{ matrix.binutils }} configuration options
        run: |
          PATH=$PATH:$PREFIX/bin ./${BINUTILS_SOURCE_DIR}/configure --help

      - name: Configure binutils ${{ matrix.binutils }}
        run: |
          cd ${BINUTILS_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin ../../${BINUTILS_SOURCE_DIR}/configure --target=${TARGET} --prefix=${PREFIX} --enable-plugins

      - name: Build binutils ${{ matrix.binutils }}
        run: |
          cd ${BINUTILS_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin make --jobs 2

      - name: Install binutils ${{ matrix.binutils }}
        run: |
          cd ${BINUTILS_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin make install

      - name: Upload 'binutils ${{ matrix.binutils }}' artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binutils-${{ matrix.binutils }}
          path: ${PREFIX}
          retention-days: 1

  gcc-bootstrap:
    name: gcc ${{ matrix.gcc }} (bootstrap)
    runs-on: ubuntu-latest

    needs: [ binutils ]

    strategy:
      matrix:
        include:
          - {arch: aarach64, binutils: 2.63.1, gcc: 10.3.0 }
          - {arch: aarach64, binutils: 2.63.1, gcc: 11.1.0 }

    env:
      TARGET:              ${{ matrix.arch }}-none-elf
      PREFIX:              ${{ needs.binutils.outputs.prefix }}

      GCC_SOURCE_DIR:      gcc-${{ matrix.gcc }}
      GCC_BUILD_DIR:       build/gcc

    outputs:
      arch:     ${{ matrix.arch }}
      target:   ${{ env.TARGET }}
      prefix:   ${{ env.PREFIX }}
      binutils: ${{ matrix.binutils }}
      gcc:      ${{ matrix.gcc }}

    steps:
      - name: Download artifacts from 'binutils' job
        uses: actions/download-artifact@v2
        with:
          name: binutils-${{ matrix.binutils }}
          path: ${PREFIX}

      - name: Restore gcc download cache (extracted downloads file)
        id:   cache-downloads
        uses: actions/cache@v2
        with:
          path: |
            gcc-${{ matrix.gcc }}/
          key: gcc-${{ matrix.gcc }}

      - name: Download gcc ${{ matrix.gcc }} and extract (in uncached)
        if:  steps.cache-downloads.outputs.cache-hit != 'true'
        run: |
          curl https://ftp.mpi-inf.mpg.de/mirrors/gnu/mirror/gcc.gnu.org/pub/gcc/releases/gcc-${{ matrix.gcc }}/gcc-${{ matrix.gcc }}.tar.gz --output gcc-${{ matrix.gcc }}.tar.gz
          tar -xzf gcc-${{ matrix.gcc }}.tar.gz
          ls -lAh

      - name: Make directory structure
        run: |
          mkdir -p ${PREFIX}
          mkdir -p ${GCC_BUILD_DIR}

      - name: Install build dependencies
        run: |
          sudo apt-get install libgmp-dev libmpfr-dev libmpc-dev libisl-dev

      - name: List gcc ${{ matrix.gcc }} configuration options
        run: |
          PATH=$PATH:$PREFIX/bin ./${GCC_SOURCE_DIR}/configure --help

      - name: Configure GCC ${{ matrix.gcc }} (bootstrap)
        run: |
          cd ${GCC_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin ../../${GCC_SOURCE_DIR}/configure --target=${TARGET} --prefix=${PREFIX} --enable-languages=c --without-headers --disable-shared --with-newlib --with-gnu-as --with-gnu-ld

      - name: Build GCC ${{ matrix.gcc }} (bootstrap)
        run: |
          cd ${GCC_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin make --jobs 2 all-gcc

      - name: Install GCC ${{ matrix.gcc }} (bootstrap)
        run: |
          cd ${GCC_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin make install-gcc

      - name: Upload 'gcc ${{ matrix.gcc }} incl. binutils ${{ matrix.binutils }} and newlib ${{ matrix.newlib }}' objects
        uses: actions/upload-artifact@v2
        with:
          name: gcc-${{ matrix.binutils }}-${{ matrix.gcc }}-${{ matrix.newlib }}-objects
          path: ${GCC_BUILD_DIR}
          retention-days: 1

      - name: Upload 'gcc ${{ matrix.gcc }} incl. binutils ${{ matrix.binutils }}' artifacts
        uses: actions/upload-artifact@v2
        with:
          name: gcc-${{ matrix.binutils }}-${{ matrix.gcc }}
          path: ${PREFIX}
          retention-days: 1

  newlib:
    name: newlib ${{ matrix.newlib }}
    runs-on: ubuntu-latest

    needs: [ gcc-bootstrap ]

    strategy:
      matrix:
        arch:     [ aarach64 ]
        binutils: [ 2.63.0, 2.63.1 ]
        gcc:      [ 11.1.0, 10.3.0 ]
        newlib:   [  4.0.0,  4.1.0 ]

    env:
      TARGET:              ${{ matrix.arch }}-none-elf
      PREFIX:              ${{ needs.gcc-bootstrap.outputs.prefix }}

      NEWLIB_SOURCE_DIR:   newlib-${{ matrix.newlib }}
      NEWLIB_BUILD_DIR:    build/newlib

    outputs:
      arch:     ${{ matrix.arch }}
      target:   ${{ env.TARGET }}
      prefix:   ${{ env.PREFIX }}
      binutils: ${{ matrix.binutils }}
      gcc:      ${{ matrix.gcc }}
      newlib:   ${{ matrix.newlib }}

    steps:
      - name: Download artifacts from 'gcc (bootstrap)' job
        uses: actions/download-artifact@v2
        with:
          name: gcc-${{ matrix.binutils }}-${{ matrix.gcc }}
          path: ${PREFIX}

      - name: Restore newlib cache (extracted downloads file)
        id:   cache-downloads
        uses: actions/cache@v2
        with:
          path: |
            newlib-${{ matrix.newlib }}/
          key: newlib-${{ matrix.newlib }}

      - name: Download newlib ${{ matrix.newlib }} and extract (in uncached)
        if:  steps.cache-downloads.outputs.cache-hit != 'true'
        run: |
          curl ftp://sourceware.org/pub/newlib/newlib-${{ matrix.newlib }}.tar.gz --output newlib-${{ matrix.newlib }}.tar.gz
          tar -xzf newlib-${{ matrix.newlib }}.tar.gz
          ls -lAh

      - name: Make directory structure
        run: |
          mkdir -p ${PREFIX}
          mkdir -p ${NEWLIB_BUILD_DIR}

      - name: List newlib ${{ matrix.newlib }} configuration options
        run: |
          PATH=$PATH:$PREFIX/bin ./${NEWLIB_SOURCE_DIR}/configure --help

      - name: Configure newlib ${{ matrix.newlib }}
        run: |
          cd ${NEWLIB_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin ../../${NEWLIB_SOURCE_DIR}/configure --target=${TARGET} --prefix=${PREFIX}

      - name: Build newlib ${{ matrix.newlib }}
        run: |
          cd ${NEWLIB_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin make --jobs 2

      - name: Install newlib ${{ matrix.newlib }}
        run: |
          cd ${NEWLIB_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin make install

      - name: Upload 'gcc ${{ matrix.gcc }} incl. binutils ${{ matrix.binutils }} and newlib ${{ matrix.newlib }}' artifacts
        uses: actions/upload-artifact@v2
        with:
          name: gcc-${{ matrix.binutils }}-${{ matrix.gcc }}-${{ matrix.newlib }}
          path: ${PREFIX}
          retention-days: 1

  gcc:
    name: gcc ${{ matrix.gcc }}
    runs-on: ubuntu-latest

    needs: [ gcc-bootstrap, newlib ]

    strategy:
      matrix:
        arch:     [ aarach64 ]
        binutils: [ 2.63.0, 2.63.1 ]
        gcc:      [ 11.1.0, 10.3.0 ]
        newlib:   [  4.0.0,  4.1.0 ]

    env:
      TARGET:              ${{ matrix.arch }}-none-elf
      PREFIX:              ${{ needs.newlib.outputs.prefix }}

      GCC_SOURCE_DIR:      gcc-${{ matrix.gcc }}
      GCC_BUILD_DIR:       build/gcc

    outputs:
      arch:     ${{ matrix.arch }}
      target:   ${{ env.TARGET }}
      prefix:   ${{ env.PREFIX }}
      binutils: ${{ matrix.binutils }}
      gcc:      ${{ matrix.gcc }}
      newlib:   ${{ matrix.newlib }}

    steps:
#      - name: Download objects from 'gcc-bootstrap' job
#        uses: actions/download-artifact@v2
#        with:
#          name: gcc-${{ matrix.binutils }}-${{ matrix.gcc }}-${{ matrix.newlib }}-objects
#          path: ${GCC_BUILD_DIR}

      - name: Download artifacts from 'newlib' job
        uses: actions/download-artifact@v2
        with:
          name: gcc-${{ matrix.binutils }}-${{ matrix.gcc }}-${{ matrix.newlib }}
          path: ${PREFIX}

      - name: Restore gcc download cache (extracted downloads file)
        id:   cache-downloads
        uses: actions/cache@v2
        with:
          path: |
            gcc-${{ matrix.gcc }}/
          key: gcc-${{ matrix.gcc }}

      - name: Download gcc ${{ matrix.gcc }} and extract (in uncached)
        if:  steps.cache-downloads.outputs.cache-hit != 'true'
        run: |
          curl https://ftp.mpi-inf.mpg.de/mirrors/gnu/mirror/gcc.gnu.org/pub/gcc/releases/gcc-${{ matrix.gcc }}/gcc-${{ matrix.gcc }}.tar.gz --output gcc-${{ matrix.gcc }}.tar.gz
          tar -xzf gcc-${{ matrix.gcc }}.tar.gz
          ls -lAh

      - name: Restore gcc build cache
        id:   cache-objects
        uses: actions/cache@v2
        with:
          path: |
            ${GCC_BUILD_DIR}/
          key: gcc-${{ matrix.gcc }}-objects

      - name: Download gcc ${{ matrix.gcc }} and extract (in uncached)
        if:  steps.cache-objects.outputs.cache-hit != 'true'
        run: false

      - name: Install build dependencies
        run: |
          sudo apt-get install libgmp-dev libmpfr-dev libmpc-dev libisl-dev

      - name: Make directory structure
        run: |
          mkdir -p ${PREFIX}
          mkdir -p ${GCC_BUILD_DIR}

      - name: Configure GCC ${{ matrix.gcc }}
        run: |
          cd ${GCC_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin ../../${GCC_SOURCE_DIR}/configure --target=${TARGET} --prefix=${PREFIX} --enable-languages=c,c++ --with-newlib --disable-shared --with-gnu-as --with-gnu-ld --disable-shared --disable-libssp

      - name: Build GCC ${{ matrix.gcc }}
        run: |
          cd ${GCC_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin make --jobs 2

      - name: Install GCC ${{ matrix.gcc }}
        run: |
          cd ${GCC_BUILD_DIR}
          PATH=$PATH:$PREFIX/bin make install

      - name: Upload 'gcc ${{ matrix.gcc }} incl. binutils ${{ matrix.binutils }} and newlib ${{ matrix.newlib }}' artifacts
        uses: actions/upload-artifact@v2
        with:
          name: gcc-${{ matrix.binutils }}-${{ matrix.gcc }}-${{ matrix.newlib }}-aarch64
          path: ${PREFIX}
          retention-days: 5
