name: GCC Toolchain for AArch64 with NewLib

on: [ push ]

env:
  BUILD_DIR: build

jobs:
  toolchain:
    name: binutils
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - { arch: aarch64, binutils: 2.36.1, gcc: 11.1.0, newlib: 4.1.0 }

    env:
      TARGET:              ${{ matrix.arch }}-none-eabi
      PREFIX:              /opt/cross

      BINUTILS_SOURCE_DIR: binutils-${{ matrix.binutils }}
      BINUTILS_BUILD_DIR:  build/binutils
      
      GCC_SOURCE_DIR:      gcc-${{ matrix.gcc }}
      GCC_BUILD_DIR:       "${{ env.BUILD_DIR }}/gcc"
      
      NEWLIB_SOURCE_DIR:   newlib-${{ matrix.newlib }}
      NEWLIB_BUILD_DIR:    "${BUILD_DIR}/newlib"

    steps:
      - name: Download binutils ${{ matrix.binutils }}
        run: curl https://mirrors.syringanetworks.net/gnu/binutils/binutils-${{ matrix.binutils }}.tar.gz --output binutils-${{ matrix.binutils }}.tar.gz
#      - name: Download GCC ${{ env.GCC_VERSION }}
#        run: curl https://ftp.mpi-inf.mpg.de/mirrors/gnu/mirror/gcc.gnu.org/pub/gcc/releases/gcc-${{ matrix.gcc }}/gcc-${{ matrix.gcc }}.tar.gz --output gcc-${{ matrix.gcc }}.tar.gz
#      - name: Download newlib ${{ env.NEWLIB_VERSION }}
#        run: curl ftp://sourceware.org/pub/newlib/newlib-${{ matrix.newlib }}.tar.gz --output newlib-${{ matrix.newlib }}.tar.gz

      - name: Extract files
        run: |
          tar -xzf binutils-${{ matrix.binutils }}.tar.gz
          ls -lAh
#          tar -xzf gcc-${{ matrix.gcc }}.tar.gz
#          tar -xzf newlib-${{ matrix.newlib }}.tar.gz

      - name: Make directory structure
        run: |
          mkdir -p ${BINUTILS_BUILD_DIR}
          mkdir -p ${GCC_BUILD_DIR}
          mkdir -p ${NEWLIB_BUILD_DIR}
          ls -lAh build

      - name: Configure binutils ${{ env.BINUTILS_VERSION }}
        run: |
          cd ${BINUTILS_BUILD_DIR}
          pwd
          readlink -f .
          ../../${BINUTILS_SOURCE_DIR}/configure --target=${{ env.target }} --prefix=${PREFIX} --enable-plugins

      - name: Build binutils ${{ env.BINUTILS_VERSION }}
        run: |
          cd ${BINUTILS_BUILD_DIR}
          make

      - name: Install binutils ${{ env.BINUTILS_VERSION }}
        run: |
          cd ${BINUTILS_BUILD_DIR}
          make install

      - name: Configure GCC ${{ env.GCC_VERSION }}
        run: |
          cd ${GCC_BUILD_DIR}
          ls -lAh ../../binutils-${{ matrix.gcc }}
          ../../${GCC_SOURCE_DIR}/configure --target=${{ env.target }} --prefix=${PREFIX} --enable-languages=c,c++ --without-headers --with-newlib --with-gnu-as --with-gnu-ld

      - name: Build GCC ${{ env.GCC_VERSION }}
        run: |
          cd ${GCC_BUILD_DIR}
          make all-gcc

      - name: Install GCC ${{ env.GCC_VERSION }}
        run: |
          cd ${GCC_BUILD_DIR}
          make install-gcc

      - name: Configure newlib ${{ env.NEWLIB_VERSION }}
        run: |
          cd ${GCC_BUILD_DIR}
          ls -lAh ../../binutils-${{ matrix.newlib }}
          ../../${NEWLIB_SOURCE_DIR}/configure --target=${{ env.target }} --prefix=${PREFIX}

      - name: Build newlib ${{ env.NEWLIB_VERSION }}
        run: |
          cd ${NEWLIB_BUILD_DIR}
          make all

      - name: Install newlib ${{ env.NEWLIB_VERSION }}
        run: |
          cd ${NEWLIB_BUILD_DIR}
          make install

      - name: Configure GCC ${{ env.GCC_VERSION }}
        run: |
          cd ${GCC_BUILD_DIR}
          ls -lAh ../../gcc-${{ matrix.gcc }}
          ../../${GCC_SOURCE_DIR}/configure --target=${{ env.target }} --prefix=$PREFIX --with-newlib --with-gnu-as --with-gnu-ld --disable-shared --disable-libssp

      - name: Build GCC ${{ env.GCC_VERSION }}
        run: |
          cd ${GCC_BUILD_DIR}
          make all

      - name: Install GCC ${{ env.GCC_VERSION }}
        run: |
          cd ${GCC_BUILD_DIR}
          make install
